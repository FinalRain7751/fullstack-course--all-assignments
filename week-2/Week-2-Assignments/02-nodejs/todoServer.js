"use strict";
/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const fs = require("fs");
// const port = 3000;
// const bodyParser = require("body-parser");

const app = express();
const pathName = `todos.json`;

app.use(express.json());

// Helper functions

const indexOfTodo = (todos, id) => todos.findIndex((todo) => todo.id === id);

const retrieveTodos = () => {
  return new Promise((resolve, reject) => {
    fs.readFile(pathName, "utf-8", (err, data) => {
      if (err) {
        res.status(500).send("Error");
        throw new Error("Failed to read from database.");
      }
      resolve(JSON.parse(data));
    });
  });
};

const writeTodos = (todos) => {
  return new Promise((resolve, reject) => {
    fs.writeFile(pathName, JSON.stringify(todos), "utf-8", (err) => {
      if (err) {
        res.status(500).send("Error");
        throw new Error("Failed to write to database.");
      }
      resolve();
    });
  });
};

// Route handlers

const getAllTodos = (req, res) => {
  retrieveTodos()
    .then((todos) => {
      res.status(200).json({
        status: "success",
        results: todos.length,
        data: {
          todos,
        },
      });
    })
    .catch((err) => {
      console.error(err);
    });
};

const createTodo = (req, res) => {
  const todoBody = req.body;
  if (!todoBody) {
    res.status(500).send("No todo given");
    throw new Error("Error");
  }
  const id = Math.floor(Date.now() / 1000);
  const todo = Object.assign(todoBody, { id });

  retrieveTodos()
    .then((todos) => {
      todos.push(todo);
      return writeTodos(todos);
    })
    .then(() => {
      res.status(201).json({
        status: "success",
        data: {
          todo,
        },
      });
    })
    .catch((err) => {
      console.error(err);
    });
};

const getTodo = (req, res) => {
  const id = +req.params.id;

  retrieveTodos()
    .then((todos) => {
      const todo = todos.find((todo) => todo.id === id);
      if (!todo) {
        res.status(404).send("Not found");
        return;
      }
      res.status(200).json({
        status: "success",
        data: {
          todo,
        },
      });
    })
    .catch((err) => {
      console.log(err);
    });
};

const updateTodo = (req, res) => {
  const idOfTodo = +req.params.id;
  retrieveTodos()
    .then((todos) => {
      let todo = todos.find((todo) => todo.id === idOfTodo);
      if (!todo) {
        res.status(404).send("Not found");
        throw new Error("Not found");
      }
      const {
        id = idOfTodo,
        title = todo.title,
        description = todo.description,
        completed = todo.completed,
      } = req.body;
      const index = indexOfTodo(todos, id);
      todos[index] = {
        id,
        title,
        description,
        completed,
      };
      return writeTodos(todos);
    })
    .then(() => {
      res.status(200).send("OK");
    })
    .catch((err) => {
      console.error(err);
    });
};

const deleteTodo = (req, res) => {
  const id = +req.params.id;
  retrieveTodos()
    .then((todos) => {
      const todoIndex = indexOfTodo(todos, id);
      if (todoIndex === -1) {
        res.status(404).send("Not found");
        throw new Error("Not found");
      }
      todos.splice(todoIndex, 1);
      return writeTodos(todos);
    })
    .then(() => {
      res.status(200).send("OK");
    })
    .catch((err) => {
      console.error(err);
    });
};

// Routes
app.route("/todos").get(getAllTodos).post(createTodo);
app.route("/todos/:id").get(getTodo).patch(updateTodo).delete(deleteTodo);

app.use((req, res, next) => {
  res.status(404).send("Not found");
});

app.listen(3000);

module.exports = app;
